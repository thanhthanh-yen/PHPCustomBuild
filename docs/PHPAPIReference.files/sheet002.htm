<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:x="urn:schemas-microsoft-com:office:excel"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=Excel.Sheet>
<meta name=Generator content="Microsoft Excel 15">
<link id=Main-File rel=Main-File href="../PHPAPIReference.htm">
<link rel=File-List href=filelist.xml>
<link rel=Stylesheet href=stylesheet.css>
<style>
<!--table
	{mso-displayed-decimal-separator:"\.";
	mso-displayed-thousand-separator:"\,";}
@page
	{margin:.75in .71in .75in .71in;
	mso-header-margin:.31in;
	mso-footer-margin:.31in;}
ruby
	{ruby-align:left;}
rt
	{color:windowtext;
	font-size:6.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:"ＭＳ Ｐゴシック", monospace;
	mso-font-charset:128;
	mso-char-type:katakana;
	display:none;}
-->
</style>
<![if !supportTabStrip]><script language="JavaScript">
<!--
function fnUpdateTabs()
 {
  if (parent.window.g_iIEVer>=4) {
   if (parent.document.readyState=="complete"
    && parent.frames['frTabs'].document.readyState=="complete")
   parent.fnSetActiveSheet(1);
  else
   window.setTimeout("fnUpdateTabs();",150);
 }
}

if (window.name!="frSheet")
 window.location.replace("../PHPAPIReference.htm");
else
 fnUpdateTabs();
//-->
</script>
<![endif]>
</head>

<body link="#0563C1" vlink="#954F72" class=xl69>

<table border=0 cellpadding=0 cellspacing=0 width=1686 style='border-collapse:
 collapse;table-layout:fixed;width:1266pt'>
 <col class=xl69 width=110 style='mso-width-source:userset;mso-width-alt:3520;
 width:83pt'>
 <col class=xl69 width=434 style='mso-width-source:userset;mso-width-alt:13888;
 width:326pt'>
 <col class=xl69 width=454 style='mso-width-source:userset;mso-width-alt:14528;
 width:341pt'>
 <col class=xl69 width=523 style='mso-width-source:userset;mso-width-alt:16736;
 width:392pt'>
 <col class=xl69 width=165 style='mso-width-source:userset;mso-width-alt:5280;
 width:124pt'>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl68 width=110 style='height:10.5pt;width:83pt'>class</td>
  <td class=xl68 width=434 style='border-left:none;width:326pt'>method</td>
  <td class=xl68 width=454 style='border-left:none;width:341pt'>description</td>
  <td class=xl68 width=523 style='border-left:none;width:392pt'>the correspond
  C client API</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=42 style='height:31.5pt'>
  <td height=42 class=xl65 width=110 style='height:31.5pt;border-top:none;
  width:83pt'>AggregationResult</td>
  <td class=xl65 width=434 style='border-top:none;border-left:none;width:326pt'>int
  get_long()<br>
    float get_double()<br>
    GSTimestamp get_timestamp()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the aggregation result as the value with specified type</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSBool
  gsGetAggregationValue (GSAggregationResult *aggregationResult, void *value,
  GSType valueType)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td rowspan=22 height=434 class=xl78 width=110 style='height:325.5pt;
  border-top:none;width:83pt'>Container</td>
  <td class=xl65 width=434 style='border-top:none;border-left:none;width:326pt'>void
  create_index(string $columnName, GSIndexTypeFlags $indexType)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Creates
  a specified type of index on the specified Column</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsCreateIndex (GSContainer *container, const GSChar *columnName,
  GSIndexTypeFlags flags)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void drop_index(string $columName,
  GSIndexTypeFlags $indexType)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Removes
  the specified type of index among indexes on the specified Column</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDropIndex (GSContainer *container, const GSChar *columnName,
  GSIndexTypeFlags flags)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>void flush()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Writes
  the results of earlier updates to a non-volatile storage medium, such as SSD,
  so as to prevent the data loss even if all cluster nodes stop suddenly</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsFlush (GSContainer *container)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>bool put_row(Row $row)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Row</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutRow (GSContainer *container, const void *key, const void *rowObj, GSBool
  *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>Query query(string $queryString)</td>
  <td class=xl71 width=454 style='border-left:none;width:341pt'>Creates a query
  to execute the specified TQL statement</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsQuery (GSContainer *container, const GSChar *queryString, GSQuery **query)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>GSContainerType get_type()</td>
  <td class=xl65 width=454 style='border-left:none;width:341pt'>Return the type
  of specified Container</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetContainerType (GSContainer *container, GSContainerType *type)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>Row create_row()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Create
  a new Row object based on the column layout of specified Container</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsCreateRowByContainer (GSContainer *container, GSRow **row)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>void abort()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Rolls
  back the result of the current transaction and starts a new transaction in
  the manual commit mode</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsAbort (GSContainer *container)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>void commit()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Commits
  the result of the current transaction and start a new transaction in the
  manual commit mode</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsCommit (GSContainer *container)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void set_auto_commit(bool $enabled)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Change
  the setting of the commit mode</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetAutoCommit (GSContainer *container, GSBool enabled)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>bool get_row_by_integer(int $key, bool
  $forUpdate, Row $row)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the content of a Row corresponding to the INTEGER-type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowByInteger (GSContainer *container, int32_t key, void *rowObj, GSBool
  forUpdate, GSBool *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>bool get_row_by_long(int $key, bool $forUpdate,
  Row $row)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the content of a Row corresponding to the LONG-type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowByLong (GSContainer *container, int64_t key, void *rowObj, GSBool
  forUpdate, GSBool *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>bool get_row_by_timestamp(GSTimestamp $key,
  bool $forUpdate, Row $row)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the content of a Row corresponding to the TIMESTAMP-type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowByTimestamp (GSContainer *container, GSTimestamp key, void *rowObj,
  GSBool forUpdate, GSBool *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>bool get_row_by_string(string $key, bool
  $forUpdate, Row $row)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the content of a Row corresponding to the STRING-type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowByString (GSContainer *container, const GSChar *key, void *rowObj,
  GSBool forUpdate, GSBool *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>bool put_row_by_integer(int $key, Row $row)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Row by specifying the INTEGER type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutRowByInteger (GSContainer *container, int32_t key, const void *rowObj,
  GSBool *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>bool put_row_by_long(int $key, Row $row)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Row by specifying the LONG type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutRowByLong (GSContainer *container, int64_t key, const void *rowObj,
  GSBool *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>bool put_row_by_timestamp(GSTimestamp $key, Row
  $row)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Row by specifying the TIMESTAMP type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutRowByTimestamp (GSContainer *container, GSTimestamp key, const void
  *rowObj, GSBool *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>bool put_row_by_string(string $key, Row $row)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Row by specifying the STRING type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutRowByString (GSContainer *container, const GSChar *key, const void
  *rowObj, GSBool *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>bool delete_row_by_integer(int $key)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Deletes
  a Row corresponding to the INTEGER-type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDeleteRowByInteger (GSContainer *container, int32_t key, GSBool *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>bool delete_row_by_long(int $key)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Deletes
  a Row corresponding to the LONG-type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDeleteRowByLong (GSContainer *container, int64_t key, GSBool *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>bool delete_row_by_timestamp(GSTimestamp $key)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Deletes
  a Row corresponding to the TIMESTAMP-type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDeleteRowByTimestamp (GSContainer *container, GSTimestamp key, GSBool
  *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>bool delete_row_by_string(string $key)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Deletes
  a Row corresponding to the STRING-type Row key</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDeleteRowByString (GSContainer *container, const GSChar *key, GSBool
  *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=42 style='height:31.5pt'>
  <td height=42 class=xl65 width=110 style='height:31.5pt;width:83pt'>GSException</td>
  <td class=xl65 width=434 style='border-top:none;border-left:none;width:326pt'>bool
  is_timeout()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>This
  function can be used to determine whether the result of the requested process
  shows the error code corresponding to the error that occurred when the
  requested process is not completed within a predetermined time</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSBool
  gsIsTimeoutError (GSResult result)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td rowspan=4 height=112 class=xl78 width=110 style='border-bottom:.5pt solid black;
  height:84.0pt;border-top:none;width:83pt'>PartitionController</td>
  <td class=xl65 width=434 style='border-top:none;border-left:none;width:326pt'>int
  get_partition_count()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  the number of partitions in the target GridDB cluster</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPartitionCount (GSPartitionController *controller, int32_t
  *partitionCount)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>int get_partition_container_count(int
  $partitionIndex)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  the total number of containers belonging to a specified partition</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPartitionContainerCount (GSPartitionController *controller, int32_t
  partitionIndex, int64_t *containerCount)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=42 style='height:31.5pt'>
  <td height=42 class=xl65 width=434 style='height:31.5pt;border-top:none;
  border-left:none;width:326pt'>array get_partition_container_names(int
  $partitionIndex, int $start, int $limit)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  a list of the Container names belonging to a specified partition</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPartitionContainerNames (GSPartitionController *controller, int32_t
  partitionIndex, int64_t start, const int64_t *limit, const GSChar *const
  **nameList, size_t *size)</td>
  <td class=xl69 width=165 style='width:124pt'>limit is optional. If not
  specified or limit &lt; 0, it is considered as no upper limit</td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>int get_partition_index_of_container(string
  $containerName)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  the partition index corresponding to the specified Container name</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPartitionIndexOfContainer (GSPartitionController *controller, const
  GSChar *containerName, int32_t *partitionIndex)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td rowspan=3 height=70 class=xl78 width=110 style='border-bottom:.5pt solid black;
  height:52.5pt;border-top:none;width:83pt'>Query</td>
  <td class=xl65 width=434 style='border-top:none;border-left:none;width:326pt'>RowSet
  fetch(bool $forUpdate)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Executes
  a specified query with the specified option and returns a set of Rows as an
  execution result</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsFetch (GSQuery *query, GSBool forUpdate, GSRowSet **rowSet)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>RowSet get_row_set()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  RowSet as the latest result</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowSet (GSQuery *query, GSRowSet **rowSet)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>void set_fetch_option_integer(GSFetchOption
  $fetchOption, int $value)<br>
    void set_fetch_option_long(GSFetchOption $fetchOption, int $value)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  an fetch option for a result acquisition</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetFetchOption (GSQuery *query, GSFetchOption fetchOption, const void
  *value, GSType valueType)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td rowspan=4 height=70 class=xl78 width=110 style='border-bottom:.5pt solid black;
  height:52.5pt;border-top:none;width:83pt'>Resource</td>
  <td class=xl65 width=434 style='border-top:none;border-left:none;width:326pt'>int
  get_error_stack_size()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the stack size of last error information related to specified resource</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>size_t
  gsGetErrorStackSize (void *gsResource)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>GSResult get_error_code(int $stackIndex)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the error code of last error related to specified resource</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetErrorCode (void *gsResource, size_t stackIndex)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>string format_error_message(int $stackIndex,
  int $bufSize)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the message of last error related to specified resource</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>size_t
  gsFormatErrorMessage (void *gsResource, size_t stackIndex, GSChar *strBuf,
  size_t bufSize)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>string format_error_location(int $stackIndex,
  int $bufSize)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the error location of the internal module to the message of last error
  related to specified resource</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>size_t
  gsFormatErrorLocation (void *gsResource, size_t stackIndex, GSChar *strBuf,
  size_t bufSize)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td rowspan=21 height=294 class=xl78 width=110 style='border-bottom:.5pt solid black;
  height:220.5pt;border-top:none;width:83pt'>Row</td>
  <td class=xl65 width=434 style='border-top:none;border-left:none;width:326pt'>void
  set_field_by_string(int $column, string $value)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the STRING-type value to the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByString (GSRow *row, int32_t column, const GSChar *fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>string get_field_as_string(int $column)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the STRING-type value in the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsString (GSRow *row, int32_t column, const GSChar **fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_bool(int $column, bool
  $value)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the BOOL-type value to the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByBool (GSRow *row, int32_t column, GSBool fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>bool get_field _as_bool(int $column)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the BOOL-type value in the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsBool (GSRow *row, int32_t column, GSBool *fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_byte(int $column, int $value)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the BYTE-type value to the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GsResult
  gsSetRowFieldByByte (GSRow *row, int32_t column, int8_t fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>int get_field _as_byte(int $column)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the BYTE-type value in the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsByte (GSRow *row, int32_t column, int8_t *fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_short(int $column, int
  $value)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the SHORT-type value to the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByShort (GSRow *row, int32_t column, int16_t fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>int get_field _as_short(int $column)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the SHORT-type value in the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsShort (GSRow *row, int32_t column, int16_t *fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_integer(int $column, int
  $value)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the INTEGER-type value to the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByInteger (GSRow *row, int32_t column, int32_t fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>int get_field _as_integer(int $column)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the INTEGER-type value in the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsInteger (GSRow *row, int32_t column, int32_t *fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_long(int $column, int $value)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the LONG-type value to the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByLong (GSRow *row, int32_t column, int64_t fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>int get_field _as_long(int $column)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the LONG-type value in the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsLong (GSRow *row, int32_t column, int64_t *fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_float(int $column, float
  $value)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the FLOAT-type value to the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByFloat (GSRow *row, int32_t column, float fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>float get_field_as_float(int $column)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the FLOAT-type value in the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsFloat (GSRow *row, int32_t column, float *fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_double(int $column, float
  $value)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the DOUBLE-type value to the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByDouble (GSRow *row, int32_t column, double fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>float get_field_as_double(int $column)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the DOUBLE-type value in the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsDouble (GSRow *row, int32_t column, double *fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_timestamp (int $column,
  GSTimestamp $value)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the TIMESTAMP-type value to the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByTimestamp (GSRow *row, int32_t column, GSTimestamp fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>GSTimestamp get_field _as_timestamp(int
  $column)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the TIMESTAMP-type value in the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsTimestamp (GSRow *row, int32_t column, GSTimestamp
  *fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void set_field_by_blob(int $column, string
  $value)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Sets
  the BLOB-type value to the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetRowFieldByBlob (GSRow *row, int32_t column, const GSBlob *fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>string get_field_as_blob(int $column)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the BLOB-type value in the specified field</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowFieldAsBlob (GSRow *row, int32_t column, GSBlob *fieldValue)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>ContainerInfo get_schema()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the schema corresponding to the specified Row</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetRowSchema (GSRow *row, GSContainerInfo *schemaInfo)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td rowspan=7 height=140 class=xl78 width=110 style='border-bottom:.5pt solid black;
  height:105.0pt;border-top:none;width:83pt'>RowSet</td>
  <td class=xl65 width=434 style='border-top:none;border-left:none;width:326pt'>void
  delete_current()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Deletes
  the Row at the current cursor position</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDeleteCurrentRow (GSRowSet *rowSet)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>void get_next(Row $row)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Moves
  the cursor to the next Row in a Row set and returns the Row object at the
  moved position</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetNextRow (GSRowSet *rowSet, void *rowObj)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>AggregationResult get_next_aggregation()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Moves
  the cursor to the next Row in a Row set and returns the aggregation result at
  the moved position</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetNextAggregation (GSRowSet *rowSet, GSAggregationResult
  **aggregationResult)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>GSRowSetType get_type()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the type of Row set</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSRowSetType
  gsGetRowSetType (GSRowSet *rowSet)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>int get_size()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the size of Row set, i.e. the number of Row when a Row set is created</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>int32_t
  gsGetRowSetSize (GSRowSet *rowSet)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>bool has_next()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  whether a Row set has at least one Row ahead of the current cursor position</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSBool
  gsHasNextRow (GSRowSet *rowSet)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>void update_current(Row $row)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Updates
  the values except a Row key of the Row at the cursor position, using the
  specified Row object</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsUpdateCurrentRow (GSRowSet *rowSet, const void *rowObj)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=56 style='height:42.0pt'>
  <td rowspan=5 height=126 class=xl79 width=110 style='height:94.5pt;
  width:83pt'>Store</td>
  <td class=xl65 width=434 style='border-top:none;border-left:none;width:326pt'>Container
  put_container(string $containerName, array&lt;array columnInfo&gt;
  $columnInfolist, GSContainerType $containerType, bool $modifiable=false, bool
  $rowKeyAssigned=true, bool $columnOrderIgnorable=false, int
  $rowExpirationTime=null, GSTimeUnit $rowExpirationTimeUnit=null, int
  $expirationDivisionCount=null)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Newly
  creates or update a Container with the specified Container properties</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsPutContainerGeneral (GSGridStore *store, const GSChar *name, const
  GSContainerInfo *info, GSBool modifiable, GSContainer **container)<span
  style='mso-spacerun:yes'>                  </span></td>
  <td class=xl69 width=165 style='width:124pt'>containerName, columnInfolist
  and containerType are required parameteres. Other parameters are
  optional.<span style='mso-spacerun:yes'> </span></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>Container get_container(string $containerName)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  a Container instance whose rows can be processed using a Row object</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetContainerGeneral (GSGridStore *store, const GSChar *name, GSContainer
  **container)<span style='mso-spacerun:yes'>         </span></td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>void drop_container(string $containerName)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Delete
  a Container with the specified name</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsDropContainer (GSGridStore *store, const GSChar *name)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>ContainerInfo get_container_info(string
  $containerName)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Get
  information related to a Container with the specified name</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetContainerInfo (GSGridStore *store, const GSChar *name, GSContainerInfo
  *info, GSBool *exists)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>PartitionController get_partition_controller()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  PartitionController corresponding to GridDB cluster</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetPartitionController (GSGridStore *store, GSPartitionController
  **partitionController)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td rowspan=4 height=84 class=xl78 width=110 style='border-bottom:.5pt solid black;
  height:63.0pt;width:83pt'>StoreFactory</td>
  <td class=xl65 width=434 style='border-top:none;border-left:none;width:326pt'>StoreFactory
  StoreFactory.get_default()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  a default StoreFactory instance</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSGridStoreFactory*
  gsGetDefaultFactory ()</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>Store get_store(array $StoreProperties)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  a Store with the specified properties</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsGetGridStore (GSGridStoreFactory *factory, const GSPropertyEntry
  *properties, size_t propertyCount, GSGridStore **store)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>void set_properties(array $propslist)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Changes
  the settings for specified Factory</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSResult
  gsSetFactoryProperties (GSGridStoreFactory *factory, const GSPropertyEntry
  *properties, size_t propertyCount)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>string get_version()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Return
  the current version of client</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>NA</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td rowspan=4 height=84 class=xl78 width=110 style='border-bottom:.5pt solid black;
  height:63.0pt;border-top:none;width:83pt'>TimestampUtils</td>
  <td class=xl65 width=434 style='border-top:none;border-left:none;width:326pt'>static
  GSTimestamp current()</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the current time</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSTimestamp
  gsCurrentTime ()</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=14 style='height:10.5pt'>
  <td height=14 class=xl65 width=434 style='height:10.5pt;border-top:none;
  border-left:none;width:326pt'>static GSTimestamp add_time(GSTimestamp
  $timestamp, int $amount, GSTimeUnit $timeUnit)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Adds
  a specific value to the specified time</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSTimestamp
  gsAddTime (GSTimestamp timestamp, int32_t amount, GSTimeUnit timeUnit)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>static string format_time(GSTimestamp
  $timestamp, int $bufSize)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the string representing the specified time, according to the TIMESTAMP value
  notation of TQL</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>size_t
  gsFormatTime (GSTimestamp timestamp, GSChar *strBuf, size_t bufSize)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <tr height=28 style='height:21.0pt'>
  <td height=28 class=xl65 width=434 style='height:21.0pt;border-top:none;
  border-left:none;width:326pt'>static GSTimestamp parse(string $str)</td>
  <td class=xl65 width=454 style='border-top:none;border-left:none;width:341pt'>Returns
  the GSTimestampa value corresponding to the specified string, according to
  the TIMESTAMP value notation of TQL</td>
  <td class=xl65 width=523 style='border-top:none;border-left:none;width:392pt'>GSBool
  gsParseTime (const GSChar *str, GSTimestamp *timestamp)</td>
  <td class=xl69 width=165 style='width:124pt'></td>
 </tr>
 <![if supportMisalignedColumns]>
 <tr height=0 style='display:none'>
  <td width=110 style='width:83pt'></td>
  <td width=434 style='width:326pt'></td>
  <td width=454 style='width:341pt'></td>
  <td width=523 style='width:392pt'></td>
  <td width=165 style='width:124pt'></td>
 </tr>
 <![endif]>
</table>

</body>

</html>
